
import pandas as pd
from pathlib import Path

# File to Load (Remember to Change These)
school_data_to_load = Path("Resources/schools_complete.csv")
student_data_to_load = Path("Resources/students_complete.csv")

# Read School and Student Data File and store into Pandas DataFrames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

# Combine the data into a single dataset.
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])
school_data_complete.head()

# Calculate the total number of unique schools
school_count =  school_data['school_name'].nunique()
school_count

# Calculate the total number of students
student_count = len(student_data["Student ID"].value_counts())
student_count

# Calculate the total budget
total_budget = school_data.groupby("school_name")["budget"].sum().reset_index()
total_budget_sum = total_budget["budget"].sum()
total_budget_sum

# Calculate the average (mean) math score
math_score = student_data["math_score"].sum()
average_math_score = math_score / student_count
average_math_score

read_score = student_data["reading_score"].sum()
average_reading_score = read_score / student_count
average_reading_score

# Use the following to calculate the percentage of students who passed math (math scores greather than or equal to 70)
passing_math_count = school_data_complete[(school_data_complete["math_score"] >= 70)].count()["student_name"]
passing_math_percentage = passing_math_count / float(student_count) * 100
passing_math_percentage

# Calculate the percentage of students who passed reading (hint: look at how the math percentage was calculated)
passing_reading_count = school_data_complete[(school_data_complete["reading_score"] >= 70)].count()["student_name"]
passing_reading_percentage = passing_reading_count / float(student_count) * 100
passing_reading_percentage

passing_math_reading_count = school_data_complete[
    (school_data_complete["math_score"] >= 70) & (school_data_complete["reading_score"] >= 70)
].count()["student_name"]
overall_passing_rate = passing_math_reading_count /  float(student_count) * 100
overall_passing_rate

# Create a high-level snapshot of the district's key metrics in a DataFrame
district_summary = pd.DataFrame({'School_Count': [school_count], 'Student_Count': [student_count], 'Total_Budget': [total_budget_sum], 'Average_Math_Score': [average_math_score], 'Average_Reading_score': [average_reading_score], 'Percentage_Passed_Math': [passing_math_percentage], 'Percentage_Passed_Reading': [passing_reading_percentage], 'Overall_Passing_Rate': [overall_passing_rate]})
# Formatting
district_summary["Student_Count"] = district_summary["Student_Count"].map("{:,}".format)
district_summary["Total_Budget"] = district_summary["Total_Budget"].map("${:,.2f}".format)

# Display the DataFrame
district_summary

# Use the code provided to select the type per school from school_data
school_types = school_data.set_index(["school_name"])["type"]

# Calculate the total student count per school from school_data
per_school_counts = school_data_complete.groupby("school_name").count()["Student ID"]
per_school_counts

# Calculate the total school budget and per capita spending per school from school_data
per_school_budget = school_data_complete.groupby("school_name")["budget"].mean()
per_school_capita = per_school_budget / per_school_counts
per_school_capita

# Calculate the average test scores per school from school_data_complete
per_school_math = school_data_complete.groupby("school_name")["math_score"].mean()
per_school_reading = school_data_complete.groupby("school_name")["reading_score"].mean()
per_school_math
per_school_reading

# Calculate the number of students per school with math scores of 70 or higher from school_data_complete
students_passing_math = school_data_complete[(school_data_complete["math_score"] >= 70)]
school_students_passing_math = students_passing_math.groupby('school_name')['Student ID'].count().reset_index()
school_students_passing_math

# Calculate the number of students per school with reading scores of 70 or higher from school_data_complete
students_passing_reading = school_data_complete[(school_data_complete["reading_score"] >= 70)]
school_students_passing_reading = students_passing_reading.groupby('school_name')['Student ID'].count().reset_index()
school_students_passing_reading

# Use the provided code to calculate the number of students per school that passed both math and reading with scores of 70 or higher
students_passing_math_and_reading = school_data_complete[
    (school_data_complete["reading_score"] >= 70) & (school_data_complete["math_score"] >= 70)
]
school_students_passing_math_and_reading = students_passing_math_and_reading.groupby(["school_name"]).size()
school_students_passing_math_and_reading

per_school_passing_math = students_passing_math.groupby(["school_name"]).count()["student_name"] / per_school_counts * 100
per_school_passing_reading = students_passing_reading.groupby(["school_name"]).count()["student_name"] / per_school_counts * 100
overall_passing_rate = students_passing_math_and_reading.groupby(["school_name"]).count()["student_name"] / per_school_counts * 100
per_school_passing_math
per_school_passing_reading
overall_passing_rate

# Create a DataFrame called `per_school_summary` with columns for the calculations above.
per_school_summary = pd.DataFrame({"School_Type" : school_types, "Total_Students" : per_school_counts, "School_Budget" : per_school_budget, "Per_Student_Budget" : per_school_capita, "Average_Math_Score" : per_school_math, "Average_Reading_Score" : per_school_reading, "Percentage_Passing_Math" : per_school_passing_math, "Percentage_Passing_Reading" : per_school_passing_reading, "Percentage_Overall_Passing" : overall_passing_rate})
# Formatting
per_school_summary["School_Budget"] = per_school_summary["School_Budget"].map("${:,.2f}".format)
per_school_summary["Per_Student_Budget"] = per_school_summary["Per_Student_Budget"].map("${:,.2f}".format)


per_school_summary 

# Sort the schools by `% Overall Passing` in descending order and display the top 5 rows.
top_schools = per_school_summary.sort_values("Percentage_Overall_Passing", ascending = False)
top_schools.head(5)

# Sort the schools by `% Overall Passing` in ascending order and display the top 5 rows.
bottom_schools = per_school_summary.sort_values("Percentage_Overall_Passing", ascending = True)
bottom_schools.head(5)

# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# Group by `school_name` and take the mean of the `math_score` column for each.
ninth_grade_scores = ninth_graders.groupby(["school_name"])
tenth_grader_scores = tenth_graders.groupby(["school_name"])
eleventh_grader_scores = eleventh_graders.groupby(["school_name"])
twelfth_grader_scores = twelfth_graders.groupby(["school_name"])

ninth_grade_math_scores = ninth_graders.groupby(["school_name"])["math_score"].mean()
tenth_grader_math_scores = tenth_graders.groupby(["school_name"])["math_score"].mean()
eleventh_grader_math_scores = eleventh_graders.groupby(["school_name"])["math_score"].mean()
twelfth_grader_math_scores = twelfth_graders.groupby(["school_name"])["math_score"].mean()

# Combine each of the scores above into single DataFrame called `math_scores_by_grade`
math_scores_by_grade = pd.DataFrame({"Ninth" : ninth_grade_math_scores, "Tenth" : tenth_grader_math_scores, "Eleventh" : eleventh_grader_math_scores, "Twelfth" : twelfth_grader_math_scores})
# Minor data wrangling
math_scores_by_grade.index.name = None
math_scores_by_grade

# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# Group by `school_name` and take the mean of the the `reading_score` column for each.
ninth_grade_reading_scores = ninth_graders.groupby(["school_name"])["reading_score"].mean()
tenth_grader_reading_scores = tenth_graders.groupby(["school_name"])["reading_score"].mean()
eleventh_grader_reading_scores = eleventh_graders.groupby(["school_name"])["reading_score"].mean()
twelfth_grader_reading_scores = twelfth_graders.groupby(["school_name"])["reading_score"].mean()

reading_scores_by_grade = pd.DataFrame({"Ninth" : ninth_grade_reading_scores, "Tenth" : tenth_grader_reading_scores, "Eleventh" : eleventh_grader_reading_scores, "Twelfth" : twelfth_grader_reading_scores})

# Minor data wrangling
reading_scores_by_grade.index.name = None

# Display the DataFrame
reading_scores_by_grade

# Establish the bins
spending_bins = [0, 585, 630, 645, 680]
labels = ["<$585", "$585-630", "$630-645", "$645-680"]

# Create a copy of the school summary since it has the "Per Student Budget"
school_spending_df = per_school_summary.copy()

# Use `pd.cut` to categorize spending based on the bins.
school_spending_df["Spending Ranges (Per Student)"] = pd.cut(per_school_capita, spending_bins, labels = labels, include_lowest = True)
school_spending_df

#  Calculate averages for the desired columns.
spending_math_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average_Math_Score"].mean()
spending_reading_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average_Reading_Score"].mean()
spending_passing_math = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Percentage_Passing_Math"].mean()
spending_passing_reading = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Percentage_Passing_Reading"].mean()
overall_passing_spending = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Percentage_Overall_Passing"].mean()

# Assemble into DataFrame
spending_summary = pd.DataFrame({"Average_Math_Score": spending_math_scores, "Average_Reading_Score": spending_reading_scores, "Percentage_Passing_Math": spending_passing_math, "Percentage_Passing_Reading": spending_passing_reading, "Percentage_Overall_Passing": overall_passing_spending})
# Display results
spending_summary

# Establish the bins.
size_bins = [0, 1000, 2000, 5000]
labels = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]

# Categorize the spending based on the bins
# Use `pd.cut` on the "Total Students" column of the `per_school_summary` DataFrame.

per_school_summary["School Size"] = pd.cut(per_school_summary["Total_Students"], size_bins, labels = labels)
per_school_summary

# Calculate averages for the desired columns.
size_math_scores = per_school_summary.groupby(["School Size"])["Average_Math_Score"].mean()
size_reading_scores = per_school_summary.groupby(["School Size"])["Average_Reading_Score"].mean()
size_passing_math = per_school_summary.groupby(["School Size"])["Percentage_Passing_Math"].mean()
size_passing_reading = per_school_summary.groupby(["School Size"])["Percentage_Passing_Reading"].mean()
size_overall_passing = per_school_summary.groupby(["School Size"])["Percentage_Overall_Passing"].mean()

# Create a DataFrame called `size_summary` that breaks down school performance based on school size (small, medium, or large).
# Use the scores above to create a new DataFrame called `size_summary`
size_summary = pd.DataFrame({"Average_Math_Score": size_math_scores, "Average_Reading_Score": size_reading_scores, "Percentage_Passing_Math": size_passing_math, "Percentage_Passing_Reading": size_passing_reading, "Percentage_Overall_Passing": size_overall_passing})

# Display results
size_summary

# Group the per_school_summary DataFrame by "School Type" and average the results.
average_math_score_by_type = per_school_summary.groupby(["School_Type"])["Average_Math_Score"].mean()
average_reading_score_by_type = per_school_summary.groupby(["School_Type"])["Average_Reading_Score"].mean()
average_percent_passing_math_by_type = per_school_summary.groupby(["School_Type"])["Percentage_Passing_Math"].mean()
average_percent_passing_reading_by_type = per_school_summary.groupby(["School_Type"])["Percentage_Passing_Reading"].mean()
average_percent_overall_passing_by_type = per_school_summary.groupby(["School_Type"])["Percentage_Overall_Passing"].mean()


# Assemble the new data by type into a DataFrame called `type_summary`
type_summary = pd.DataFrame({"Average_Math_Score": average_math_score_by_type, "Average_Reading_Score": average_reading_score_by_type, "Percentage_Passing_Math": average_percent_passing_math_by_type, "Percentage_Passing_Reading": average_percent_passing_reading_by_type, "Percentage_Overall_Passing": average_percent_overall_passing_by_type})


# Display results
type_summary
